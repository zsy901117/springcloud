package com.sg.controller;

import com.sg.entity.Role;
import com.sg.entity.User;
import com.sg.service.RoleService;
import com.sg.service.UserService;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

@RestController
@RequestMapping({ "/role" })
public class RoleController {
	@Autowired
	private RoleService RoleService;
	@Autowired
	private UserService userService;

	@GetMapping({ "/findAll" })
	public ModelAndView findAll() {
		ModelAndView mv = new ModelAndView("role/rolelist");
		String company = "����";
		List<User> userList = this.userService.getUserList(company);
		mv.addObject("userList", userList);
		return mv;
	}

	@GetMapping({ "/findById" })
	public ModelAndView findById(@RequestParam("id") long id) {
		ModelAndView mv = new ModelAndView("role/role");
		User user = this.userService.findUserById(id);
		mv.addObject("user", user);
		List<Role> roles = this.RoleService.findById(id);
		String rolename = "";
		for (Role role : roles) {
			String name = role.getName();
			rolename = rolename + name + " ";
		}
		mv.addObject("rolename", rolename);
		return mv;
	}

	@PostMapping({ "/edit" })
	public ModelAndView edit(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView("role/role");

		String[] webrolenames = request.getParameterValues("role");
		List<String> webnamelist = new ArrayList();
		for (int i = 0; i < webrolenames.length; i++) {
			webnamelist.add(webrolenames[i]);
		}
		String strid = request.getParameter("id");
		Long id = Long.valueOf(strid);
		User user = this.userService.findUserById(id.longValue());
		mv.addObject("user", user);
		List<String> dbroleNames = this.RoleService.findRoleName(id.longValue());
		String[] rname = { "user", "admin", "guest", "root" };
		HashMap<String, Long> ids = new HashMap();
		ids.put("uid", id);
		for (int i = 0; i < 4; i++) {
			if ((webnamelist.contains(rname[i])) && (!dbroleNames.contains(rname[i]))) {
				ids.put("rid", Long.valueOf(i + 1));
				this.RoleService.insertRole(ids);
			} else if ((!webnamelist.contains(rname[i])) && (dbroleNames.contains(rname[i]))) {
				ids.put("rid", Long.valueOf(i + 1));
				this.RoleService.deleteRole(ids);
			}
		}
		List<Role> roles = this.RoleService.findById(id.longValue());
		String rolename = "";
		for (Role role : roles) {
			String name = role.getName();
			rolename = rolename + name + " ";
		}
		mv.addObject("rolename", rolename);
		return mv;
	}
}
